### 1、 jmeter的两种运行方式：GUI和非GUI

GUI：在Windows系统上运行，图形化界面，方便查看测试结果，但是消耗压力机资源较高，容易卡死，有并发限制。

非GUI：通过命令行运行，无图形化界面，不方便查看测试结果，但是消耗压力机资源较低，可以支持较大并发。

### 2、GUI、非GUI遇到的问题

Jmeter是基于java程序运行的，在windows上使用Jmeter进行性能测试时，非常耗费客户机的CPU和内存，如果并发数稍微大一点(比如100、1000...并发)，单台电脑的配置经常无法支持，很容易卡死，即使不卡死也会使电脑运行很慢，导致我们没办法进行其它操作。

通过cmd命令行，或者是在Linux上使用Jmeter进行性能测试时，能够大大缩减所需要的系统资源；但是需要将jmeter脚本上传到Linux上使用命令行方式运行，如果脚本经常改动就要频繁上传；测试完成后要把结果数据下载到本地GUI环境中查看，当结果文件较大时，下载要花费大量时间，总是有很多不方便。

### 3、如何解决？

以上问题，都可以使用Jmeter的分布式测试功能来解决：

通过Jmeter远程启动功能，把一台windows机器做为控制器，远程控制其它多个windows或linux压力机，从而把压力分散到多台机器上，实现高并发功能；并在master上收集测试结果。

## jmeter分布式原理

jmeter的分布式控制，说的通俗一点，就是指远程启动功能，具体原理如下图：

![image-20200922094506898](https://typora-lxx.oss-cn-beijing.aliyuncs.com/img/20200922094512.png)

1、客户端机器（window系统或者linux服务器）作为一个控制器controller，控制多台slave机器的操作。

2、Controller和slave机器上最好装有相同版本的jdk和jmeter，并配置好环境变量，安装和配置方法跟windows环境类似。

3、controller通过GUI界面启动slave机器，将jmeter压测脚本发送给每台启动的slave，slave获得脚本后开始执行。slave本地不需预先存储脚本，但是需要有脚本中的依赖文件（如csv文件等）。

4、各台slave执行完成后，将结果传回给controller，controller收集后整合显示出来。